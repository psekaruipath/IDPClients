/**
 * IS4 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { CreateMessageTemplateCommand } from '../model/createMessageTemplateCommand';
import { MessageTemplateDto } from '../model/messageTemplateDto';
import { UpdateMessageTemplateCommand } from '../model/updateMessageTemplateCommand';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class MessageTemplateService {

    protected basePath = 'https://devtest-im-identity.azurewebsites.net/identity';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Get a message template using the provided filter.
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMessageTemplateGet(name?: string, observe?: 'body', reportProgress?: boolean): Observable<MessageTemplateDto>;
    public apiMessageTemplateGet(name?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MessageTemplateDto>>;
    public apiMessageTemplateGet(name?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MessageTemplateDto>>;
    public apiMessageTemplateGet(name?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<MessageTemplateDto>(`${this.configuration.basePath}/api/MessageTemplate`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create new message template.
     * @param createMessageTemplateCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMessageTemplatePost(createMessageTemplateCommand?: CreateMessageTemplateCommand, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public apiMessageTemplatePost(createMessageTemplateCommand?: CreateMessageTemplateCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public apiMessageTemplatePost(createMessageTemplateCommand?: CreateMessageTemplateCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public apiMessageTemplatePost(createMessageTemplateCommand?: CreateMessageTemplateCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.configuration.basePath}/api/MessageTemplate`,
            createMessageTemplateCommand,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete the specified message template.
     * @param templateId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMessageTemplateTemplateIdDelete(templateId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiMessageTemplateTemplateIdDelete(templateId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiMessageTemplateTemplateIdDelete(templateId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiMessageTemplateTemplateIdDelete(templateId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling apiMessageTemplateTemplateIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/MessageTemplate/${encodeURIComponent(String(templateId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a message template by Id.
     * @param templateId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMessageTemplateTemplateIdGet(templateId: number, observe?: 'body', reportProgress?: boolean): Observable<MessageTemplateDto>;
    public apiMessageTemplateTemplateIdGet(templateId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MessageTemplateDto>>;
    public apiMessageTemplateTemplateIdGet(templateId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MessageTemplateDto>>;
    public apiMessageTemplateTemplateIdGet(templateId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling apiMessageTemplateTemplateIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<MessageTemplateDto>(`${this.configuration.basePath}/api/MessageTemplate/${encodeURIComponent(String(templateId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update existing message template.
     * @param templateId 
     * @param updateMessageTemplateCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMessageTemplateTemplateIdPut(templateId: number, updateMessageTemplateCommand?: UpdateMessageTemplateCommand, observe?: 'body', reportProgress?: boolean): Observable<MessageTemplateDto>;
    public apiMessageTemplateTemplateIdPut(templateId: number, updateMessageTemplateCommand?: UpdateMessageTemplateCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MessageTemplateDto>>;
    public apiMessageTemplateTemplateIdPut(templateId: number, updateMessageTemplateCommand?: UpdateMessageTemplateCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MessageTemplateDto>>;
    public apiMessageTemplateTemplateIdPut(templateId: number, updateMessageTemplateCommand?: UpdateMessageTemplateCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling apiMessageTemplateTemplateIdPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<MessageTemplateDto>(`${this.configuration.basePath}/api/MessageTemplate/${encodeURIComponent(String(templateId))}`,
            updateMessageTemplateCommand,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
