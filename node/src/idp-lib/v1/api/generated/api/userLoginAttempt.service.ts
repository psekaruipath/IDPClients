/**
 * IS4 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { SortOrderDto } from '../model/sortOrderDto';
import { UserLoginAttemptDtoPagedResultDto } from '../model/userLoginAttemptDtoPagedResultDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class UserLoginAttemptService {

    protected basePath = 'https://devtest-im-identity.azurewebsites.net/identity';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Get the login attempts of a user
     * @param userId The data used to create a new user.
     * @param top The number of records to return. Default is 10.
     * @param skip The number of records to skip. Default is 0.
     * @param sortBy The name of the field to sort by.
     * @param sortOrder The sort order.
     * @param since The date since records should be returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiUserUserIdLoginAttemptsGet(userId: string, top?: number, skip?: number, sortBy?: string, sortOrder?: SortOrderDto, since?: Date, observe?: 'body', reportProgress?: boolean): Observable<UserLoginAttemptDtoPagedResultDto>;
    public apiUserUserIdLoginAttemptsGet(userId: string, top?: number, skip?: number, sortBy?: string, sortOrder?: SortOrderDto, since?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserLoginAttemptDtoPagedResultDto>>;
    public apiUserUserIdLoginAttemptsGet(userId: string, top?: number, skip?: number, sortBy?: string, sortOrder?: SortOrderDto, since?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserLoginAttemptDtoPagedResultDto>>;
    public apiUserUserIdLoginAttemptsGet(userId: string, top?: number, skip?: number, sortBy?: string, sortOrder?: SortOrderDto, since?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling apiUserUserIdLoginAttemptsGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (top !== undefined && top !== null) {
            queryParameters = queryParameters.set('top', <any>top);
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortOrder !== undefined && sortOrder !== null) {
            queryParameters = queryParameters.set('sortOrder', <any>sortOrder);
        }
        if (since !== undefined && since !== null) {
            queryParameters = queryParameters.set('since', (since as any instanceof Date) ? (since as any).toISOString().substr(0, 10) : since);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<UserLoginAttemptDtoPagedResultDto>(`${this.configuration.basePath}/api/User/${encodeURIComponent(String(userId))}/loginAttempts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
