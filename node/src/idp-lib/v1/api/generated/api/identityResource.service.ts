/**
 * IS4 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { CreateIdentityResourceCommand } from '../model/createIdentityResourceCommand';
import { IdentityResource } from '../model/identityResource';
import { UpdateIdentityResourceCommand } from '../model/updateIdentityResourceCommand';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class IdentityResourceService {

    protected basePath = 'https://devtest-im-identity.azurewebsites.net/identity';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Get the full list of Identity Resources (Identity Server).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiIdentityResourceGet(observe?: 'body', reportProgress?: boolean): Observable<Array<IdentityResource>>;
    public apiIdentityResourceGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IdentityResource>>>;
    public apiIdentityResourceGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IdentityResource>>>;
    public apiIdentityResourceGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<IdentityResource>>(`${this.configuration.basePath}/api/IdentityResource`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes the specified Identity Resource (Identity Server).
     * @param identityResourceName The unique name of the Identity Resource that will be deleted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiIdentityResourceIdentityResourceNameDelete(identityResourceName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiIdentityResourceIdentityResourceNameDelete(identityResourceName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiIdentityResourceIdentityResourceNameDelete(identityResourceName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiIdentityResourceIdentityResourceNameDelete(identityResourceName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (identityResourceName === null || identityResourceName === undefined) {
            throw new Error('Required parameter identityResourceName was null or undefined when calling apiIdentityResourceIdentityResourceNameDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/IdentityResource/${encodeURIComponent(String(identityResourceName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the Identity Resource (Identity Server) that matches the provided name.
     * @param identityResourceName The  identity server Identity Resource unique resource name to fetch.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiIdentityResourceIdentityResourceNameGet(identityResourceName: string, observe?: 'body', reportProgress?: boolean): Observable<IdentityResource>;
    public apiIdentityResourceIdentityResourceNameGet(identityResourceName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IdentityResource>>;
    public apiIdentityResourceIdentityResourceNameGet(identityResourceName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IdentityResource>>;
    public apiIdentityResourceIdentityResourceNameGet(identityResourceName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (identityResourceName === null || identityResourceName === undefined) {
            throw new Error('Required parameter identityResourceName was null or undefined when calling apiIdentityResourceIdentityResourceNameGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<IdentityResource>(`${this.configuration.basePath}/api/IdentityResource/${encodeURIComponent(String(identityResourceName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the Identity Resource entity (Identity Server).
     * @param identityResourceName The current name of the Identity Resource that will be updated.
     * @param updateIdentityResourceCommand Command used to update a IdentityResource.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiIdentityResourceIdentityResourceNamePut(identityResourceName: string, updateIdentityResourceCommand?: UpdateIdentityResourceCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiIdentityResourceIdentityResourceNamePut(identityResourceName: string, updateIdentityResourceCommand?: UpdateIdentityResourceCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiIdentityResourceIdentityResourceNamePut(identityResourceName: string, updateIdentityResourceCommand?: UpdateIdentityResourceCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiIdentityResourceIdentityResourceNamePut(identityResourceName: string, updateIdentityResourceCommand?: UpdateIdentityResourceCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (identityResourceName === null || identityResourceName === undefined) {
            throw new Error('Required parameter identityResourceName was null or undefined when calling apiIdentityResourceIdentityResourceNamePut.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/api/IdentityResource/${encodeURIComponent(String(identityResourceName))}`,
            updateIdentityResourceCommand,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new Identity Resource (Identity Server).
     * @param createIdentityResourceCommand Command used to create a new identity server Identity Resource.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiIdentityResourcePost(createIdentityResourceCommand?: CreateIdentityResourceCommand, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public apiIdentityResourcePost(createIdentityResourceCommand?: CreateIdentityResourceCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public apiIdentityResourcePost(createIdentityResourceCommand?: CreateIdentityResourceCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public apiIdentityResourcePost(createIdentityResourceCommand?: CreateIdentityResourceCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.configuration.basePath}/api/IdentityResource`,
            createIdentityResourceCommand,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
